{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,EAAE,WAAF,CAAlB,EAAkC;AAClC,IAAMC,UAAUF,UAAUG,IAAV,CAAe,SAAf,CAAhB,EAA2C;AAC3C,IAAMC,IAAIC,aAAaC,OAAb,CAAqB,GAArB,CAAV,EAAqC;AACrC,IAAMC,UAAUC,KAAKC,KAAL,CAAWL,CAAX,CAAhB,EAA+B;AAC/B,IAAMM,UAAUH,WAAW,CACzB,EAAEI,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EADyB,EAEzB,EAAED,MAAM,GAAR,EAAaC,KAAK,0BAAlB,EAFyB,CAA3B,EAGG;AACH,IAAMC,cAAc,SAAdA,WAAc,CAACD,GAAD,EAAS;AAC3B,SAAOA,IACJE,OADI,CACI,UADJ,EACgB,EADhB,EAEJA,OAFI,CAEI,SAFJ,EAEe,EAFf,EAGJA,OAHI,CAGI,MAHJ,EAGY,EAHZ,EAIJA,OAJI,CAII,MAJJ,EAIY,EAJZ,CAAP,CAD2B,CAKH;AACzB,CAND;AAOA,IAAMC,SAAS,SAATA,MAAS,GAAM;AACnBf,YAAUG,IAAV,CAAe,eAAf,EAAgCa,MAAhC;AACAN,UAAQO,OAAR,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC/B,QAAMC,MAAMnB,gEAESiB,KAAKP,IAFd,0CAGUE,YAAYK,KAAKN,GAAjB,CAHV,0LAUJS,YAVI,CAUSnB,OAVT,CAAZ;AAWAkB,QAAIE,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpBC,aAAOC,IAAP,CAAYN,KAAKN,GAAjB;AACD,KAFD,EAZ+B,CAc3B;AACJQ,QAAIE,EAAJ,CAAO,OAAP,EAAgB,QAAhB,EAA0B,UAACG,CAAD,EAAO;AAC/BA,QAAEC,eAAF;AACAhB,cAAQiB,MAAR,CAAeR,KAAf,EAAsB,CAAtB;AACAJ;AACD,KAJD,EAf+B,CAmB3B;AACL,GApBD;AAqBD,CAvBD,EAuBG;AACHA;;AAEAd,EAAE,YAAF,EAAgBqB,EAAhB,CAAmB,OAAnB,EAA4B,YAAM;AAChC,MAAIV,MAAMW,OAAOK,MAAP,CAAc,cAAd,CAAV;AACA,MAAIhB,IAAIiB,OAAJ,CAAY,MAAZ,MAAwB,CAA5B,EAA+B;AAC7BjB,UAAM,aAAaA,GAAnB;AACD,GAJ+B,CAI9B;AACFF,UAAQoB,IAAR,CAAa;AACXnB,UAAME,YAAYD,GAAZ,EAAiB,CAAjB,EAAoBmB,WAApB,EADK;AAEXnB,SAAKA;AAFM,GAAb,EALgC,CAQ5B;AACJG,WATgC,CAStB;AACX,CAVD;;AAYAQ,OAAOS,cAAP,GAAwB,YAAM;AAC5B,MAAMC,SAASzB,KAAK0B,SAAL,CAAexB,OAAf,CAAf,CAD4B,CACY;AACxCL,eAAa8B,OAAb,CAAqB,GAArB,EAA0BF,MAA1B,EAF4B,CAEO;AACpC,CAHD,EAGG;;AAEHhC,EAAEmC,QAAF,EAAYd,EAAZ,CAAe,UAAf,EAA2B,UAACG,CAAD,EAAO;AAChC;AADgC,MAExBY,GAFwB,GAEhBZ,CAFgB,CAExBY,GAFwB;;AAGhC,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI5B,QAAQ6B,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,QAAI5B,QAAQ4B,CAAR,EAAW3B,IAAX,CAAgB6B,WAAhB,OAAkCH,GAAtC,EAA2C;AACzCd,aAAOC,IAAP,CAAYd,QAAQ4B,CAAR,EAAW1B,GAAvB;AACD;AACF;AACD6B,UAAQC,GAAR,CAAYL,GAAZ;AACD,CATD","file":"main.08d8f85e.map","sourceRoot":"..\\src","sourcesContent":["const $siteList = $(\".siteList\"); /*选择div插入地点*/\r\nconst $lastLi = $siteList.find(\"li.last\"); /*新增div插入位置查询*/\r\nconst x = localStorage.getItem(\"x\"); //从localStorage中取出字符串\r\nconst xObject = JSON.parse(x); //将字符串还原成对象\r\nconst hashMap = xObject || [\r\n  { logo: \"A\", url: \"https://www.acfun.cn\" },\r\n  { logo: \"B\", url: \"https://www.bilibili.com\" },\r\n]; //数组中包含哈希表来存储网页需要的数据，同时判断xObject是否为空(第一次使用肯定为空)\r\nconst simplifyUrl = (url) => {\r\n  return url\r\n    .replace(\"https://\", \"\")\r\n    .replace(\"http://\", \"\")\r\n    .replace(\"www.\", \"\")\r\n    .replace(/\\/.*/, \"\"); //正则表达式,删除/之后的东西\r\n};\r\nconst render = () => {\r\n  $siteList.find(\"li:not(.last)\").remove();\r\n  hashMap.forEach((node, index) => {\r\n    const $li = $(`<li>\r\n    <div class=\"site\">\r\n     <div class=\"logo\">${node.logo}</div>\r\n      <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n      <div class=\"close\">\r\n      <svg class=\"icon\">\r\n                <use xlink:href=\"#icon-guanbi\"></use>\r\n              </svg>\r\n      </div>\r\n    </div>\r\n    </li>`).insertBefore($lastLi);\r\n    $li.on(\"click\", () => {\r\n      window.open(node.url);\r\n    }); //用监听实现跳转\r\n    $li.on(\"click\", \".close\", (e) => {\r\n      e.stopPropagation();\r\n      hashMap.splice(index, 1);\r\n      render();\r\n    }); //阻止冒泡\r\n  });\r\n}; //render是用来渲染哈希列表，简单来说就是把哈希表中存储的数据赋值到render函数创建的元素上\r\nrender();\r\n\r\n$(\".addButton\").on(\"click\", () => {\r\n  let url = window.prompt(\"请问你要添加的网址是什么\");\r\n  if (url.indexOf(\"http\") !== 0) {\r\n    url = \"https://\" + url;\r\n  } /*判断网址格式是否正确，补全网址 */\r\n  hashMap.push({\r\n    logo: simplifyUrl(url)[0].toUpperCase(),\r\n    url: url,\r\n  }); //直接把新的网址和数据传入哈希存储中\r\n  render(); //然后重新渲染\r\n});\r\n\r\nwindow.onbeforeunload = () => {\r\n  const string = JSON.stringify(hashMap); //对象变成字符串\r\n  localStorage.setItem(\"x\", string); //将字符串传入localStorage中\r\n}; //判断是否要关闭页面\r\n\r\n$(document).on(\"keypress\", (e) => {\r\n  // const key = e.key;等价\r\n  const { key } = e;\r\n  for (let i = 0; i < hashMap.length; i++) {\r\n    if (hashMap[i].logo.toLowerCase() === key) {\r\n      window.open(hashMap[i].url);\r\n    }\r\n  }\r\n  console.log(key);\r\n});\r\n"]}